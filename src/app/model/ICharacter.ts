// generated by quicktype
//
// To parse this data:
//
//   import { Convert, ICharacter } from "./file";
//
//   const iCharacter = Convert.toICharacter(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

export interface ICharacter {
    characterName:   string;
    playerName:      string;
    species:         string;
    career:          string;
    specialisations: ISpecialisation[];
    characteristics: ICharacteristic[];
    attributes:      IAttributes;
    generalSkills:   ISkill[];
    combatSkills:    ISkill[];
    knowledgeSkills: ISkill[];
    weapons:         IWeapon[];
}

export interface IAttributes {
    wound:   number;
    strain:  number;
    soak:    number;
    defense: IDefense;
}

export interface IDefense {
    ranged: number;
    melee:  number;
}

export interface ICharacteristic {
    name:  string;
    value: number;
}

export interface ISkill {
    name:      string;
    attribute: string;
    dicePool:  IDicePool;
    career:    boolean;
    rank:      number;
}

export interface IDicePool {
    yellow:      number;
    green:       number;
    blue:        number;
    autoSuccess: number;
    force:       number;
}

export interface ISpecialisation {
    name: string;
}

export interface IWeapon {
    name:     string;
    skill:    string;
    range:    string;
    damage:   number;
    critical: number;
    dicePool: IDicePool;
    special:  string;
}

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
export class Convert {
    public static toICharacter(json: string): ICharacter {
        return cast(JSON.parse(json), r("ICharacter"));
    }

    public static iCharacterToJson(value: ICharacter): string {
        return JSON.stringify(uncast(value, r("ICharacter")), null, 2);
    }
}

function invalidValue(typ: any, val: any): never {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ: any): any {
    if (typ.jsonToJS === undefined) {
        var map: any = {};
        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
    if (typ.jsToJSON === undefined) {
        var map: any = {};
        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val: any, typ: any, getProps: any): any {
    function transformPrimitive(typ: string, val: any): any {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs: any[], val: any): any {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases: string[], val: any): any {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ: any, val: any): any {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformDate(typ: any, val: any): any {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue("Date", val);
        }
        return d;
    }

    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result: any = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number") return transformDate(typ, val);
    return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
    return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
    return transform(val, typ, jsToJSONProps);
}

function a(typ: any) {
    return { arrayItems: typ };
}

function u(...typs: any[]) {
    return { unionMembers: typs };
}

function o(props: any[], additional: any) {
    return { props, additional };
}

function m(additional: any) {
    return { props: [], additional };
}

function r(name: string) {
    return { ref: name };
}

const typeMap: any = {
    "ICharacter": o([
        { json: "characterName", js: "characterName", typ: "" },
        { json: "playerName", js: "playerName", typ: "" },
        { json: "species", js: "species", typ: "" },
        { json: "career", js: "career", typ: "" },
        { json: "specialisations", js: "specialisations", typ: a(r("ISpecialisation")) },
        { json: "characteristics", js: "characteristics", typ: a(r("ICharacteristic")) },
        { json: "attributes", js: "attributes", typ: r("IAttributes") },
        { json: "generalSkills", js: "generalSkills", typ: a(r("ISkill")) },
        { json: "combatSkills", js: "combatSkills", typ: a(r("ISkill")) },
        { json: "knowledgeSkills", js: "knowledgeSkills", typ: a(r("ISkill")) },
        { json: "weapons", js: "weapons", typ: a(r("IWeapon")) },
    ], false),
    "IAttributes": o([
        { json: "wound", js: "wound", typ: 0 },
        { json: "strain", js: "strain", typ: 0 },
        { json: "soak", js: "soak", typ: 0 },
        { json: "defense", js: "defense", typ: r("IDefense") },
    ], false),
    "IDefense": o([
        { json: "ranged", js: "ranged", typ: 0 },
        { json: "melee", js: "melee", typ: 0 },
    ], false),
    "ICharacteristic": o([
        { json: "name", js: "name", typ: "" },
        { json: "value", js: "value", typ: 0 },
    ], false),
    "ISkill": o([
        { json: "name", js: "name", typ: "" },
        { json: "attribute", js: "attribute", typ: "" },
        { json: "dicePool", js: "dicePool", typ: r("IDicePool") },
        { json: "career", js: "career", typ: true },
        { json: "rank", js: "rank", typ: 0 },
    ], false),
    "IDicePool": o([
        { json: "yellow", js: "yellow", typ: 0 },
        { json: "green", js: "green", typ: 0 },
        { json: "blue", js: "blue", typ: 0 },
        { json: "autoSuccess", js: "autoSuccess", typ: 0 },
    ], false),
    "ISpecialisation": o([
        { json: "name", js: "name", typ: "" },
    ], false),
    "IWeapon": o([
        { json: "name", js: "name", typ: "" },
        { json: "skill", js: "skill", typ: "" },
        { json: "range", js: "range", typ: "" },
        { json: "damage", js: "damage", typ: 0 },
        { json: "critical", js: "critical", typ: 0 },
        { json: "dicePool", js: "dicePool", typ: r("IDicePool") },
        { json: "special", js: "special", typ: "" },
    ], false),
};
