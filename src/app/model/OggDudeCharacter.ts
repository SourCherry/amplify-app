// generated by quicktype
//
// To parse this data:
//
//   import { Convert, OggDudeCharacter } from "./file";
//
//   const oggDudeCharacter = Convert.toOggDudeCharacter(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

export interface OggDudeCharacter {
    Character: Character;
}

export interface Character {
    $:                 CharacterClass;
    LastChanged:       Date;
    NotPersisted:      string;
    FileName:          string;
    Name:              null;
    Key:               string;
    Description:       Description;
    Characteristics:   CharacterCharacteristics;
    Motivations:       Motivations;
    Specializations:   Specializations;
    ForcePowers:       ForcePowers;
    SigAbilities:      null;
    Skills:            CharacterSkills;
    ObOptions:         Options;
    Obligations:       Obligations;
    DutOptions:        Options;
    Duties:            null;
    Experience:        Experience;
    Attributes:        CharacterAttributes;
    Species:           Species;
    Career:            Career;
    Class:             Class;
    Hook:              Hook;
    Attitude:          Attitude;
    Weapons:           CharacterWeapons;
    Armor:             CharacterArmor;
    Gear:              Gear;
    Vehicles:          Vehicles;
    NPCs:              NPCS;
    SummaryPriorities: null;
    Story:             string;
    Credits:           string;
    Morality:          Morality;
    Grants:            Grants;
    Rigger:            Rigger;
    Schematics:        Schematics;
    Rewards:           Rewards;
    UseGrants:         string;
    Portrait:          string;
    AutoRecalc:        string;
}

export interface CharacterClass {
    "xmlns:xsi": string;
    "xmlns:xsd": string;
}

export interface CharacterArmor {
    CharArmor: CharArmorElement[];
}

export interface CharArmorElement {
    ItemKey:               null | string;
    Key:                   string;
    Count:                 string;
    PurchasedAttachments?: PurplePurchasedAttachments;
    CustomArmor?:          CustomArmor;
    Equipped?:             string;
    Held?:                 string;
    AddlHP?:               string;
}

export interface CustomArmor {
    Name:        string;
    Description: string;
    Categories:  CustomArmorCategories;
    Encumbrance: string;
    HP:          string;
    Price:       string;
    Defense:     string;
    Soak:        string;
    Rarity?:     string;
    BaseMods?:   CustomArmorBaseMods;
}

export interface CustomArmorBaseMods {
    Mod: PurpleMod;
}

export interface PurpleMod {
    Count:        string;
    MiscDesc:     string;
    DieModifiers: PurpleDieModifiers;
}

export interface PurpleDieModifiers {
    DieModifier: PurpleDieModifier;
}

export interface PurpleDieModifier {
    SkillKey:       string;
    AdvantageCount: string;
}

export interface CustomArmorCategories {
    Category: string[];
}

export interface PurplePurchasedAttachments {
    CharItemAttachment: PurpleCharItemAttachment[];
}

export interface PurpleCharItemAttachment {
    AllMods:        PurpleMods;
    AttachKey:      string;
    BaseMods?:      PurpleBaseMods;
    PurchasedMods?: PurpleMods;
}

export interface PurpleMods {
    Mod: ItemDescInfoElement[] | ItemDescInfoElement;
}

export interface ItemDescInfoElement {
    Count?:               string;
    MiscDesc?:            string;
    ID?:                  string;
    Key?:                 string;
    WeaponModifierIndex?: string;
    Index?:               string;
    QualSet?:             string;
    DieModifiers?:        ItemDescInfoDieModifiers;
}

export interface ItemDescInfoDieModifiers {
    DieModifier: DieModifierElement[];
}

export interface DieModifierElement {
    SkillKey:        SkillKey;
    SkillChar:       string;
    AdvantageCount?: string;
    ThreatCount?:    string;
}

export enum SkillKey {
    Ltsaber = "LTSABER",
}

export interface PurpleBaseMods {
    ItemDescInfo: ItemDescInfoElement[] | ItemDescInfoElement;
}

export interface Attitude {
    AttitudeKey: string;
}

export interface CharacterAttributes {
    SoakValue:       PurpleSoakValue;
    WoundThreshold:  StrainThreshold;
    StrainThreshold: StrainThreshold;
    DefenseRanged:   DefenseRanged;
    DefenseMelee:    DefenseMelee;
    ForceRating:     ForceRating;
}

export interface DefenseMelee {
    TalentRanks:    string;
    PurchasedRanks: string;
}

export interface DefenseRanged {
    PurchasedRanks: string;
}

export interface ForceRating {
    StartingRanks: string;
    TalentRanks:   string;
}

export interface PurpleSoakValue {
    StartingRanks:  string;
    PurchasedRanks: string;
}

export interface StrainThreshold {
    StartingRanks?:  string;
    SpeciesRanks:    string;
    TalentRanks?:    string;
    AttachRanks?:    string;
    PurchasedRanks?: string;
}

export interface Career {
    CareerKey:        string;
    StartingSpecKey:  string;
    CareerSkills:     Skills;
    CareerSpecSkills: Skills;
}

export interface Skills {
    Key: string[];
}

export interface CharacterCharacteristics {
    CharCharacteristic: PurpleCharCharacteristic[];
}

export interface PurpleCharCharacteristic {
    Key:  string;
    Name: string;
    Rank: StrainThreshold;
}

export interface Class {
    ClassKey: string;
}

export interface Description {
    CharName:      string;
    PlayerName:    string;
    GenderValue:   string;
    Age:           string;
    Height:        string;
    Build:         string;
    Hair:          string;
    Eyes:          string;
    OtherFeatures: string;
    Campaign:      string;
    Gender:        string;
}

export interface Options {
    StartingSize: string;
}

export interface Experience {
    ExperienceRanks: ExperienceRanks | null;
    UsedExperience:  string;
}

export interface ExperienceRanks {
    StartingRanks:  string;
    SpeciesRanks:   string;
    PurchasedRanks: string;
}

export interface ForcePowers {
    CharForcePower: CharForcePower[];
}

export interface CharForcePower {
    Key:             string;
    Name:            string;
    ForceAbilities:  ForceAbilities;
    MentorDiscount?: string;
}

export interface ForceAbilities {
    CharForceAbility: CharForceAbility[];
}

export interface CharForceAbility {
    Key:        string;
    Col:        string;
    Row:        string;
    Span:       string;
    Cost:       string;
    Purchased?: string;
}

export interface Gear {
    CharGear: CharGear[];
}

export interface CharGear {
    ItemKey:               null | string;
    Key:                   string;
    Count:                 string;
    Equipped?:             string;
    Held?:                 string;
    CustomGear?:           CustomGear;
    PurchasedAttachments?: CharGearPurchasedAttachments;
}

export interface CustomGear {
    Name:          string;
    Description:   string;
    Type:          string;
    Categories:    null;
    Encumbrance:   string;
    Price:         string;
    Rarity:        string;
    AdvImportPath: null;
    BaseMods?:     CustomGearBaseMods;
}

export interface CustomGearBaseMods {
    Mod: FluffyMod[];
}

export interface FluffyMod {
    MiscDesc:      string;
    DieModifiers?: FluffyDieModifiers;
}

export interface FluffyDieModifiers {
    DieModifier: FluffyDieModifier;
}

export interface FluffyDieModifier {
    SkillKey:             Key;
    AdvantageCount?:      string;
    UpgradeAbilityCount?: string;
    SetbackCount?:        string;
    SuccessCount?:        string;
}

export enum Key {
    Comp = "COMP",
    Mech = "MECH",
}

export interface CharGearPurchasedAttachments {
    CharItemAttachment: FluffyCharItemAttachment;
}

export interface FluffyCharItemAttachment {
    AllMods:   AllMods;
    AttachKey: string;
    BaseMods:  FluffyBaseMods;
}

export interface AllMods {
    Mod: ItemDescInfoElement;
}

export interface FluffyBaseMods {
    ItemDescInfo: ItemDescInfoElement;
}

export interface Grants {
    UseGrants:   string;
    FreeSpecs:   FreeSpecs;
    FreeFR:      string;
    FreeFRCount: string;
}

export interface FreeSpecs {
    Key: string;
}

export interface Hook {
    HookKey: string;
}

export interface Morality {
    Options:          OptionsClass;
    MoralityPairs:    MoralityPairs;
    ModifiedMorality: string;
    MoralityValue:    string;
}

export interface MoralityPairs {
    MoralityPair: MoralityPair;
}

export interface MoralityPair {
    StrengthKey: string;
    WeaknessKey: string;
    Notes:       string;
}

export interface OptionsClass {
    Option: string;
}

export interface Motivations {
    CharMotivation: CharMotivation;
}

export interface CharMotivation {
    Key:           string;
    Name:          string;
    MotiveKey:     string;
    SpecMotiveKey: string;
}

export interface NPCS {
    Adversary: Adversary[];
}

export interface Adversary {
    LastChanged:     Date;
    NotPersisted:    string;
    FileName:        string;
    Name:            string;
    Key:             string;
    Description:     string;
    Category:        string;
    Characteristics: AdversaryCharacteristics;
    Talents?:        AdversaryTalents;
    Skills:          AdversarySkills;
    Experience:      Experience;
    Attributes:      AdversaryAttributes;
    Gear?:           Gear;
    Abilities?:      Abilities;
    SpecialArmor?:   SpecialArmor;
    Silhouette:      string;
    Price:           string;
    Rarity:          string;
    Type:            string;
    Weapons?:        AdversaryWeapons;
    Restricted?:     string;
    Armor?:          AdversaryArmor;
}

export interface Abilities {
    AdvAbility: AdvAbility;
}

export interface AdvAbility {
    Key:         string;
    Name:        string;
    Description: string;
}

export interface AdversaryArmor {
    CharArmor: PurpleCharArmor;
}

export interface PurpleCharArmor {
    ItemKey:              string;
    Key:                  string;
    Equipped:             string;
    Count:                string;
    PurchasedAttachments: CharGearPurchasedAttachments;
}

export interface AdversaryAttributes {
    SoakValue:       FluffySoakValue;
    WoundThreshold:  WoundThreshold;
    StrainThreshold: PurpleStrainThreshold;
    DefenseRanged:   Defense | null;
    DefenseMelee:    Defense | null;
    ForceRating:     null;
}

export interface Defense {
    ItemRanks?:      string;
    PurchasedRanks?: string;
}

export interface FluffySoakValue {
    ItemRanks?:     string;
    PurchasedRanks: string;
    CharRanks:      string;
}

export interface PurpleStrainThreshold {
    CharRanks:      string;
    StartingRanks?: string;
}

export interface WoundThreshold {
    StartingRanks:   string;
    PurchasedRanks?: string;
    CharRanks:       string;
}

export interface AdversaryCharacteristics {
    CharCharacteristic: FluffyCharCharacteristic[];
}

export interface FluffyCharCharacteristic {
    Key:   string;
    Rank:  PurpleRank;
    Name?: string;
}

export interface PurpleRank {
    StartingRanks:   string;
    CyberRanks?:     string;
    PurchasedRanks?: string;
}

export interface AdversarySkills {
    CharSkill: PurpleCharSkill[];
}

export interface PurpleCharSkill {
    Key:  string;
    Rank: DefenseRanged | null;
}

export interface SpecialArmor {
    AdvArmor: AdvArmor;
}

export interface AdvArmor {
    Key:     string;
    Name:    string;
    Soak:    string;
    Defense: string;
}

export interface AdversaryTalents {
    CharTalent: PurpleCharTalent[];
}

export interface PurpleCharTalent {
    Key:   string;
    Ranks: string;
}

export interface AdversaryWeapons {
    CharWeapon: PurpleCharWeapon[];
}

export interface PurpleCharWeapon {
    ItemKey:               string;
    Key:                   string;
    Equipped:              string;
    Count:                 string;
    PurchasedAttachments?: PurplePurchasedAttachments;
}

export interface Obligations {
    CharObligation: CharObligation;
}

export interface CharObligation {
    Key:   string;
    Name:  string;
    Size:  string;
    ObKey: string;
}

export interface Rewards {
    CharReward: CharReward;
}

export interface CharReward {
    RewardKey:       string;
    SelectedOptions: CharRewardSelectedOptions;
}

export interface CharRewardSelectedOptions {
    CharOption: PurpleCharOption;
}

export interface PurpleCharOption {
    ChoiceKey: string;
    OptionKey: string;
}

export interface Rigger {
    VehicleKey:    null;
    WeaponIndex:   string;
    custRigger:    null;
    MaxSilhouette: string;
}

export interface Schematics {
    CharSchematic: CharSchematic[];
}

export interface CharSchematic {
    TemplateKey: string;
    Level:       string;
    refTemplate: RefTemplate;
}

export interface RefTemplate {
    Key:                      string;
    Name:                     string;
    Description:              string;
    Source:                   SourceClass;
    TempType:                 string;
    MaterialCost:             string;
    MaterialRarity:           string;
    TimeHours:                string;
    TimePerSilhouette:        string;
    CheckSkills:              CheckSkills;
    CheckDifficulty:          CheckDifficulty;
    ArmorProfile?:            ArmorProfile;
    WeaponProfile?:           WeaponProfile;
    Droid?:                   Droid;
    DroidDirect?:             DroidDirect;
    TemplateSkill?:           TemplateSkill;
    TemplateSkillRightTool?:  string;
    GearProfile?:             GearProfile;
    TemplateSkillSuccess?:    string;
    TemplateSkillRemSetback?: string;
    VehicleProfile?:          VehicleProfile;
    MaterialRestricted?:      string;
}

export interface ArmorProfile {
    Categories:  ArmorProfileCategories;
    Encumbrance: string;
    Rarity:      string;
    Soak:        string;
    Name?:       string;
    HP?:         string;
}

export interface ArmorProfileCategories {
    Category: string[] | string;
}

export interface CheckDifficulty {
    Difficulty: string[] | string;
}

export interface CheckSkills {
    Key: string[] | Key;
}

export interface Droid {
    LastChanged:     Date;
    NotPersisted:    string;
    FileName:        string;
    Name:            null;
    Key:             string;
    Category:        string;
    Characteristics: DroidCharacteristics;
    Skills:          null;
    Experience:      Experience;
    Attributes:      DroidAttributes;
    Type:            string;
    Silhouette?:     string;
}

export interface DroidAttributes {
    SoakValue:       DefenseRanged;
    WoundThreshold:  DefenseRanged | null;
    StrainThreshold: null;
    DefenseRanged:   null;
    DefenseMelee:    null;
    ForceRating:     null;
}

export interface DroidCharacteristics {
    CharCharacteristic: TentacledCharCharacteristic[];
}

export interface TentacledCharCharacteristic {
    Key:   string;
    Rank:  FluffyRank;
    Name?: string;
}

export interface FluffyRank {
    StartingRanks: string;
}

export interface DroidDirect {
    Skills:            AdversarySkills | null;
    Talents:           AdversaryTalents | null;
    SkillChoices?:     TemplateSkill;
    SkillChoiceRanks?: string;
    MakeNemesis?:      string;
}

export interface TemplateSkill {
    TypeValue:  string;
    SkillCount: string;
    Type:       string;
}

export interface GearProfile {
    Type:        string;
    Categories:  null;
    Encumbrance: string;
    Rarity:      string;
    BaseMods:    GearProfileBaseMods;
}

export interface GearProfileBaseMods {
    Mod: ModMod;
}

export interface ModMod {
    MiscDesc: string;
}

export interface SourceClass {
    _: Empty;
    $: Source;
}

export interface Source {
    Page: string;
}

export enum Empty {
    EndlessVigil = "Endless Vigil",
    FullyOperational = "Fully Operational",
    KeepingThePeace = "Keeping the Peace",
    SpecialModifications = "Special Modifications",
}

export interface VehicleProfile {
    Name:                string;
    Type:                string;
    Categories:          CustomArmorCategories;
    HP:                  string;
    Crew:                string;
    EncumbranceCapacity: string;
    Passengers:          string;
    Silhouette:          string;
    HullTrauma:          string;
    Starship:            string;
    SensorRange:         string;
}

export interface WeaponProfile {
    Type:        string;
    Categories:  ArmorProfileCategories;
    Encumbrance: string;
    HP?:         string;
    Rarity:      string;
    SkillKey:    string;
    DamageAdd?:  string;
    Crit?:       string;
    RangeValue:  string;
    Hands?:      string;
    Qualities?:  Qualities;
    Range:       string;
    Damage?:     string;
    BaseMods?:   WeaponProfileBaseMods;
    NoMelee?:    string;
    Price?:      string;
}

export interface WeaponProfileBaseMods {
    Mod: QualityElement;
}

export interface QualityElement {
    Key:    string;
    Count?: string;
}

export interface Qualities {
    Quality: QualityElement[] | QualityElement;
}

export interface CharacterSkills {
    CharSkill: FluffyCharSkill[];
}

export interface FluffyCharSkill {
    Key:              string;
    Rank:             CharSkillRank | null;
    isCareer?:        string;
    CharKeyOverride?: string;
}

export interface CharSkillRank {
    AttachRanks?:    string;
    PurchasedRanks?: string;
    NonCareerRanks?: string;
    CareerRanks?:    string;
    SpeciesRanks?:   string;
}

export interface Specializations {
    CharSpecialization: CharSpecialization[];
}

export interface CharSpecialization {
    Key:             string;
    Name:            string;
    isStartingSpec?: string;
    isCareerSpec?:   string;
    Talents:         CharSpecializationTalents;
}

export interface CharSpecializationTalents {
    CharTalent: FluffyCharTalent[];
}

export interface FluffyCharTalent {
    Key:             string;
    Col:             string;
    Row:             string;
    Purchased?:      string;
    BonusChars?:     BonusChars;
    SelectedSkills?: FreeSpecs;
}

export interface BonusChars {
    BonusChar: BonusChar;
}

export interface BonusChar {
    CharKey: string;
    Bonus:   string;
}

export interface Species {
    SpeciesKey:      string;
    SubSpeciesKey:   null;
    SelectedOptions: SpeciesSelectedOptions;
    NonCareerSkills: Skills;
}

export interface SpeciesSelectedOptions {
    CharOption: FluffyCharOption;
}

export interface FluffyCharOption {
    ChoiceKey:             string;
    OptionKey:             string;
    StartingSkillTraining: StartingSkillTraining;
}

export interface StartingSkillTraining {
    SkillTraining: SkillTraining;
}

export interface SkillTraining {
    SkillCount:  string;
    Requirement: Requirement;
}

export interface Requirement {
    NonCareer: string;
}

export interface Vehicles {
    CharVehicle: CharVehicle[];
}

export interface CharVehicle {
    ItemKey:               string;
    Key:                   string;
    Count:                 string;
    PurchasedAttachments?: CharVehiclePurchasedAttachments;
    Name?:                 string;
    Portrait:              string;
    WeaponUpgrades?:       WeaponUpgrades;
}

export interface CharVehiclePurchasedAttachments {
    CharItemAttachment: TentacledCharItemAttachment[] | StickyCharItemAttachment;
}

export interface TentacledCharItemAttachment {
    AllMods:        PurpleMods;
    AttachKey:      string;
    BaseMods:       PurpleBaseMods;
    PurchasedMods?: FluffyMods;
}

export interface FluffyMods {
    Mod: ItemDescInfoElement[];
}

export interface StickyCharItemAttachment {
    AllMods:        PurpleMods;
    AttachKey:      string;
    BaseMods:       FluffyBaseMods;
    PurchasedMods?: FluffyMods;
}

export interface WeaponUpgrades {
    WeaponUpgrade: WeaponUpgrade[];
}

export interface WeaponUpgrade {
    AttachKey:         null;
    WeapKey:           string;
    ReplacementIndex?: string;
    Properties:        Properties;
}

export interface Properties {
    Location:    string;
    Turret?:     string;
    Retractable: string;
    FiringArcs:  FiringArcs;
}

export interface FiringArcs {
    Fore:      string;
    Aft:       string;
    Port:      string;
    Starboard: string;
    Dorsal?:   string;
    Ventral?:  string;
}

export interface CharacterWeapons {
    CharWeapon: FluffyCharWeapon[];
}

export interface FluffyCharWeapon {
    ItemKey:               null | string;
    Key:                   string;
    Count:                 string;
    PurchasedAttachments?: FluffyPurchasedAttachments;
    Notes?:                string;
    CustomWeap?:           CustomWeap;
    Equipped?:             string;
    Held?:                 string;
    AddlHP?:               string;
    Innate?:               string;
}

export interface CustomWeap {
    Name:        string;
    Description: string;
    Type:        string;
    Categories:  ArmorProfileCategories;
    Encumbrance: string;
    HP:          string;
    Price:       string;
    Rarity?:     string;
    BaseMods?:   CustomWeapBaseMods;
    SkillKey:    string;
    RangeValue:  string;
    NoMelee?:    string;
    Hands?:      string;
    Qualities:   Qualities;
    Range:       string;
    DamageAdd?:  string;
    Crit?:       string;
    Damage?:     string;
}

export interface CustomWeapBaseMods {
    Mod: ItemDescInfoElement[] | ModMod;
}

export interface FluffyPurchasedAttachments {
    CharItemAttachment: PurpleCharItemAttachment[] | IndigoCharItemAttachment;
}

export interface IndigoCharItemAttachment {
    AllMods:   FluffyMods;
    AttachKey: string;
    BaseMods:  TentacledBaseMods;
}

export interface TentacledBaseMods {
    ItemDescInfo: ItemDescInfoElement[];
}

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
export class Convert {
    public static toOggDudeCharacter(json: string): OggDudeCharacter {
        return cast(JSON.parse(json), r("OggDudeCharacter"));
    }

    public static oggDudeCharacterToJson(value: OggDudeCharacter): string {
        return JSON.stringify(uncast(value, r("OggDudeCharacter")), null, 2);
    }
}

function invalidValue(typ: any, val: any): never {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ: any): any {
    if (typ.jsonToJS === undefined) {
        var map: any = {};
        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
    if (typ.jsToJSON === undefined) {
        var map: any = {};
        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val: any, typ: any, getProps: any): any {
    function transformPrimitive(typ: string, val: any): any {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs: any[], val: any): any {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases: string[], val: any): any {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ: any, val: any): any {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformDate(typ: any, val: any): any {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue("Date", val);
        }
        return d;
    }

    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result: any = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number") return transformDate(typ, val);
    return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
    return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
    return transform(val, typ, jsToJSONProps);
}

function a(typ: any) {
    return { arrayItems: typ };
}

function u(...typs: any[]) {
    return { unionMembers: typs };
}

function o(props: any[], additional: any) {
    return { props, additional };
}

function m(additional: any) {
    return { props: [], additional };
}

function r(name: string) {
    return { ref: name };
}

const typeMap: any = {
    "OggDudeCharacter": o([
        { json: "Character", js: "Character", typ: r("Character") },
    ], false),
    "Character": o([
        { json: "$", js: "$", typ: r("CharacterClass") },
        { json: "LastChanged", js: "LastChanged", typ: Date },
        { json: "NotPersisted", js: "NotPersisted", typ: "" },
        { json: "FileName", js: "FileName", typ: "" },
        { json: "Name", js: "Name", typ: null },
        { json: "Key", js: "Key", typ: "" },
        { json: "Description", js: "Description", typ: r("Description") },
        { json: "Characteristics", js: "Characteristics", typ: r("CharacterCharacteristics") },
        { json: "Motivations", js: "Motivations", typ: r("Motivations") },
        { json: "Specializations", js: "Specializations", typ: r("Specializations") },
        { json: "ForcePowers", js: "ForcePowers", typ: r("ForcePowers") },
        { json: "SigAbilities", js: "SigAbilities", typ: null },
        { json: "Skills", js: "Skills", typ: r("CharacterSkills") },
        { json: "ObOptions", js: "ObOptions", typ: r("Options") },
        { json: "Obligations", js: "Obligations", typ: r("Obligations") },
        { json: "DutOptions", js: "DutOptions", typ: r("Options") },
        { json: "Duties", js: "Duties", typ: null },
        { json: "Experience", js: "Experience", typ: r("Experience") },
        { json: "Attributes", js: "Attributes", typ: r("CharacterAttributes") },
        { json: "Species", js: "Species", typ: r("Species") },
        { json: "Career", js: "Career", typ: r("Career") },
        { json: "Class", js: "Class", typ: r("Class") },
        { json: "Hook", js: "Hook", typ: r("Hook") },
        { json: "Attitude", js: "Attitude", typ: r("Attitude") },
        { json: "Weapons", js: "Weapons", typ: r("CharacterWeapons") },
        { json: "Armor", js: "Armor", typ: r("CharacterArmor") },
        { json: "Gear", js: "Gear", typ: r("Gear") },
        { json: "Vehicles", js: "Vehicles", typ: r("Vehicles") },
        { json: "NPCs", js: "NPCs", typ: r("NPCS") },
        { json: "SummaryPriorities", js: "SummaryPriorities", typ: null },
        { json: "Story", js: "Story", typ: "" },
        { json: "Credits", js: "Credits", typ: "" },
        { json: "Morality", js: "Morality", typ: r("Morality") },
        { json: "Grants", js: "Grants", typ: r("Grants") },
        { json: "Rigger", js: "Rigger", typ: r("Rigger") },
        { json: "Schematics", js: "Schematics", typ: r("Schematics") },
        { json: "Rewards", js: "Rewards", typ: r("Rewards") },
        { json: "UseGrants", js: "UseGrants", typ: "" },
        { json: "Portrait", js: "Portrait", typ: "" },
        { json: "AutoRecalc", js: "AutoRecalc", typ: "" },
    ], false),
    "CharacterClass": o([
        { json: "xmlns:xsi", js: "xmlns:xsi", typ: "" },
        { json: "xmlns:xsd", js: "xmlns:xsd", typ: "" },
    ], false),
    "CharacterArmor": o([
        { json: "CharArmor", js: "CharArmor", typ: a(r("CharArmorElement")) },
    ], false),
    "CharArmorElement": o([
        { json: "ItemKey", js: "ItemKey", typ: u(null, "") },
        { json: "Key", js: "Key", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: u(undefined, r("PurplePurchasedAttachments")) },
        { json: "CustomArmor", js: "CustomArmor", typ: u(undefined, r("CustomArmor")) },
        { json: "Equipped", js: "Equipped", typ: u(undefined, "") },
        { json: "Held", js: "Held", typ: u(undefined, "") },
        { json: "AddlHP", js: "AddlHP", typ: u(undefined, "") },
    ], false),
    "CustomArmor": o([
        { json: "Name", js: "Name", typ: "" },
        { json: "Description", js: "Description", typ: "" },
        { json: "Categories", js: "Categories", typ: r("CustomArmorCategories") },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "HP", js: "HP", typ: "" },
        { json: "Price", js: "Price", typ: "" },
        { json: "Defense", js: "Defense", typ: "" },
        { json: "Soak", js: "Soak", typ: "" },
        { json: "Rarity", js: "Rarity", typ: u(undefined, "") },
        { json: "BaseMods", js: "BaseMods", typ: u(undefined, r("CustomArmorBaseMods")) },
    ], false),
    "CustomArmorBaseMods": o([
        { json: "Mod", js: "Mod", typ: r("PurpleMod") },
    ], false),
    "PurpleMod": o([
        { json: "Count", js: "Count", typ: "" },
        { json: "MiscDesc", js: "MiscDesc", typ: "" },
        { json: "DieModifiers", js: "DieModifiers", typ: r("PurpleDieModifiers") },
    ], false),
    "PurpleDieModifiers": o([
        { json: "DieModifier", js: "DieModifier", typ: r("PurpleDieModifier") },
    ], false),
    "PurpleDieModifier": o([
        { json: "SkillKey", js: "SkillKey", typ: "" },
        { json: "AdvantageCount", js: "AdvantageCount", typ: "" },
    ], false),
    "CustomArmorCategories": o([
        { json: "Category", js: "Category", typ: a("") },
    ], false),
    "PurplePurchasedAttachments": o([
        { json: "CharItemAttachment", js: "CharItemAttachment", typ: a(r("PurpleCharItemAttachment")) },
    ], false),
    "PurpleCharItemAttachment": o([
        { json: "AllMods", js: "AllMods", typ: r("PurpleMods") },
        { json: "AttachKey", js: "AttachKey", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: u(undefined, r("PurpleBaseMods")) },
        { json: "PurchasedMods", js: "PurchasedMods", typ: u(undefined, r("PurpleMods")) },
    ], false),
    "PurpleMods": o([
        { json: "Mod", js: "Mod", typ: u(a(r("ItemDescInfoElement")), r("ItemDescInfoElement")) },
    ], false),
    "ItemDescInfoElement": o([
        { json: "Count", js: "Count", typ: u(undefined, "") },
        { json: "MiscDesc", js: "MiscDesc", typ: u(undefined, "") },
        { json: "ID", js: "ID", typ: u(undefined, "") },
        { json: "Key", js: "Key", typ: u(undefined, "") },
        { json: "WeaponModifierIndex", js: "WeaponModifierIndex", typ: u(undefined, "") },
        { json: "Index", js: "Index", typ: u(undefined, "") },
        { json: "QualSet", js: "QualSet", typ: u(undefined, "") },
        { json: "DieModifiers", js: "DieModifiers", typ: u(undefined, r("ItemDescInfoDieModifiers")) },
    ], false),
    "ItemDescInfoDieModifiers": o([
        { json: "DieModifier", js: "DieModifier", typ: a(r("DieModifierElement")) },
    ], false),
    "DieModifierElement": o([
        { json: "SkillKey", js: "SkillKey", typ: r("SkillKey") },
        { json: "SkillChar", js: "SkillChar", typ: "" },
        { json: "AdvantageCount", js: "AdvantageCount", typ: u(undefined, "") },
        { json: "ThreatCount", js: "ThreatCount", typ: u(undefined, "") },
    ], false),
    "PurpleBaseMods": o([
        { json: "ItemDescInfo", js: "ItemDescInfo", typ: u(a(r("ItemDescInfoElement")), r("ItemDescInfoElement")) },
    ], false),
    "Attitude": o([
        { json: "AttitudeKey", js: "AttitudeKey", typ: "" },
    ], false),
    "CharacterAttributes": o([
        { json: "SoakValue", js: "SoakValue", typ: r("PurpleSoakValue") },
        { json: "WoundThreshold", js: "WoundThreshold", typ: r("StrainThreshold") },
        { json: "StrainThreshold", js: "StrainThreshold", typ: r("StrainThreshold") },
        { json: "DefenseRanged", js: "DefenseRanged", typ: r("DefenseRanged") },
        { json: "DefenseMelee", js: "DefenseMelee", typ: r("DefenseMelee") },
        { json: "ForceRating", js: "ForceRating", typ: r("ForceRating") },
    ], false),
    "DefenseMelee": o([
        { json: "TalentRanks", js: "TalentRanks", typ: "" },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: "" },
    ], false),
    "DefenseRanged": o([
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: "" },
    ], false),
    "ForceRating": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
        { json: "TalentRanks", js: "TalentRanks", typ: "" },
    ], false),
    "PurpleSoakValue": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: "" },
    ], false),
    "StrainThreshold": o([
        { json: "StartingRanks", js: "StartingRanks", typ: u(undefined, "") },
        { json: "SpeciesRanks", js: "SpeciesRanks", typ: "" },
        { json: "TalentRanks", js: "TalentRanks", typ: u(undefined, "") },
        { json: "AttachRanks", js: "AttachRanks", typ: u(undefined, "") },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: u(undefined, "") },
    ], false),
    "Career": o([
        { json: "CareerKey", js: "CareerKey", typ: "" },
        { json: "StartingSpecKey", js: "StartingSpecKey", typ: "" },
        { json: "CareerSkills", js: "CareerSkills", typ: r("Skills") },
        { json: "CareerSpecSkills", js: "CareerSpecSkills", typ: r("Skills") },
    ], false),
    "Skills": o([
        { json: "Key", js: "Key", typ: a("") },
    ], false),
    "CharacterCharacteristics": o([
        { json: "CharCharacteristic", js: "CharCharacteristic", typ: a(r("PurpleCharCharacteristic")) },
    ], false),
    "PurpleCharCharacteristic": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Rank", js: "Rank", typ: r("StrainThreshold") },
    ], false),
    "Class": o([
        { json: "ClassKey", js: "ClassKey", typ: "" },
    ], false),
    "Description": o([
        { json: "CharName", js: "CharName", typ: "" },
        { json: "PlayerName", js: "PlayerName", typ: "" },
        { json: "GenderValue", js: "GenderValue", typ: "" },
        { json: "Age", js: "Age", typ: "" },
        { json: "Height", js: "Height", typ: "" },
        { json: "Build", js: "Build", typ: "" },
        { json: "Hair", js: "Hair", typ: "" },
        { json: "Eyes", js: "Eyes", typ: "" },
        { json: "OtherFeatures", js: "OtherFeatures", typ: "" },
        { json: "Campaign", js: "Campaign", typ: "" },
        { json: "Gender", js: "Gender", typ: "" },
    ], false),
    "Options": o([
        { json: "StartingSize", js: "StartingSize", typ: "" },
    ], false),
    "Experience": o([
        { json: "ExperienceRanks", js: "ExperienceRanks", typ: u(r("ExperienceRanks"), null) },
        { json: "UsedExperience", js: "UsedExperience", typ: "" },
    ], false),
    "ExperienceRanks": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
        { json: "SpeciesRanks", js: "SpeciesRanks", typ: "" },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: "" },
    ], false),
    "ForcePowers": o([
        { json: "CharForcePower", js: "CharForcePower", typ: a(r("CharForcePower")) },
    ], false),
    "CharForcePower": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "ForceAbilities", js: "ForceAbilities", typ: r("ForceAbilities") },
        { json: "MentorDiscount", js: "MentorDiscount", typ: u(undefined, "") },
    ], false),
    "ForceAbilities": o([
        { json: "CharForceAbility", js: "CharForceAbility", typ: a(r("CharForceAbility")) },
    ], false),
    "CharForceAbility": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Col", js: "Col", typ: "" },
        { json: "Row", js: "Row", typ: "" },
        { json: "Span", js: "Span", typ: "" },
        { json: "Cost", js: "Cost", typ: "" },
        { json: "Purchased", js: "Purchased", typ: u(undefined, "") },
    ], false),
    "Gear": o([
        { json: "CharGear", js: "CharGear", typ: a(r("CharGear")) },
    ], false),
    "CharGear": o([
        { json: "ItemKey", js: "ItemKey", typ: u(null, "") },
        { json: "Key", js: "Key", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "Equipped", js: "Equipped", typ: u(undefined, "") },
        { json: "Held", js: "Held", typ: u(undefined, "") },
        { json: "CustomGear", js: "CustomGear", typ: u(undefined, r("CustomGear")) },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: u(undefined, r("CharGearPurchasedAttachments")) },
    ], false),
    "CustomGear": o([
        { json: "Name", js: "Name", typ: "" },
        { json: "Description", js: "Description", typ: "" },
        { json: "Type", js: "Type", typ: "" },
        { json: "Categories", js: "Categories", typ: null },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "Price", js: "Price", typ: "" },
        { json: "Rarity", js: "Rarity", typ: "" },
        { json: "AdvImportPath", js: "AdvImportPath", typ: null },
        { json: "BaseMods", js: "BaseMods", typ: u(undefined, r("CustomGearBaseMods")) },
    ], false),
    "CustomGearBaseMods": o([
        { json: "Mod", js: "Mod", typ: a(r("FluffyMod")) },
    ], false),
    "FluffyMod": o([
        { json: "MiscDesc", js: "MiscDesc", typ: "" },
        { json: "DieModifiers", js: "DieModifiers", typ: u(undefined, r("FluffyDieModifiers")) },
    ], false),
    "FluffyDieModifiers": o([
        { json: "DieModifier", js: "DieModifier", typ: r("FluffyDieModifier") },
    ], false),
    "FluffyDieModifier": o([
        { json: "SkillKey", js: "SkillKey", typ: r("Key") },
        { json: "AdvantageCount", js: "AdvantageCount", typ: u(undefined, "") },
        { json: "UpgradeAbilityCount", js: "UpgradeAbilityCount", typ: u(undefined, "") },
        { json: "SetbackCount", js: "SetbackCount", typ: u(undefined, "") },
        { json: "SuccessCount", js: "SuccessCount", typ: u(undefined, "") },
    ], false),
    "CharGearPurchasedAttachments": o([
        { json: "CharItemAttachment", js: "CharItemAttachment", typ: r("FluffyCharItemAttachment") },
    ], false),
    "FluffyCharItemAttachment": o([
        { json: "AllMods", js: "AllMods", typ: r("AllMods") },
        { json: "AttachKey", js: "AttachKey", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: r("FluffyBaseMods") },
    ], false),
    "AllMods": o([
        { json: "Mod", js: "Mod", typ: r("ItemDescInfoElement") },
    ], false),
    "FluffyBaseMods": o([
        { json: "ItemDescInfo", js: "ItemDescInfo", typ: r("ItemDescInfoElement") },
    ], false),
    "Grants": o([
        { json: "UseGrants", js: "UseGrants", typ: "" },
        { json: "FreeSpecs", js: "FreeSpecs", typ: r("FreeSpecs") },
        { json: "FreeFR", js: "FreeFR", typ: "" },
        { json: "FreeFRCount", js: "FreeFRCount", typ: "" },
    ], false),
    "FreeSpecs": o([
        { json: "Key", js: "Key", typ: "" },
    ], false),
    "Hook": o([
        { json: "HookKey", js: "HookKey", typ: "" },
    ], false),
    "Morality": o([
        { json: "Options", js: "Options", typ: r("OptionsClass") },
        { json: "MoralityPairs", js: "MoralityPairs", typ: r("MoralityPairs") },
        { json: "ModifiedMorality", js: "ModifiedMorality", typ: "" },
        { json: "MoralityValue", js: "MoralityValue", typ: "" },
    ], false),
    "MoralityPairs": o([
        { json: "MoralityPair", js: "MoralityPair", typ: r("MoralityPair") },
    ], false),
    "MoralityPair": o([
        { json: "StrengthKey", js: "StrengthKey", typ: "" },
        { json: "WeaknessKey", js: "WeaknessKey", typ: "" },
        { json: "Notes", js: "Notes", typ: "" },
    ], false),
    "OptionsClass": o([
        { json: "Option", js: "Option", typ: "" },
    ], false),
    "Motivations": o([
        { json: "CharMotivation", js: "CharMotivation", typ: r("CharMotivation") },
    ], false),
    "CharMotivation": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "MotiveKey", js: "MotiveKey", typ: "" },
        { json: "SpecMotiveKey", js: "SpecMotiveKey", typ: "" },
    ], false),
    "NPCS": o([
        { json: "Adversary", js: "Adversary", typ: a(r("Adversary")) },
    ], false),
    "Adversary": o([
        { json: "LastChanged", js: "LastChanged", typ: Date },
        { json: "NotPersisted", js: "NotPersisted", typ: "" },
        { json: "FileName", js: "FileName", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Key", js: "Key", typ: "" },
        { json: "Description", js: "Description", typ: "" },
        { json: "Category", js: "Category", typ: "" },
        { json: "Characteristics", js: "Characteristics", typ: r("AdversaryCharacteristics") },
        { json: "Talents", js: "Talents", typ: u(undefined, r("AdversaryTalents")) },
        { json: "Skills", js: "Skills", typ: r("AdversarySkills") },
        { json: "Experience", js: "Experience", typ: r("Experience") },
        { json: "Attributes", js: "Attributes", typ: r("AdversaryAttributes") },
        { json: "Gear", js: "Gear", typ: u(undefined, r("Gear")) },
        { json: "Abilities", js: "Abilities", typ: u(undefined, r("Abilities")) },
        { json: "SpecialArmor", js: "SpecialArmor", typ: u(undefined, r("SpecialArmor")) },
        { json: "Silhouette", js: "Silhouette", typ: "" },
        { json: "Price", js: "Price", typ: "" },
        { json: "Rarity", js: "Rarity", typ: "" },
        { json: "Type", js: "Type", typ: "" },
        { json: "Weapons", js: "Weapons", typ: u(undefined, r("AdversaryWeapons")) },
        { json: "Restricted", js: "Restricted", typ: u(undefined, "") },
        { json: "Armor", js: "Armor", typ: u(undefined, r("AdversaryArmor")) },
    ], false),
    "Abilities": o([
        { json: "AdvAbility", js: "AdvAbility", typ: r("AdvAbility") },
    ], false),
    "AdvAbility": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Description", js: "Description", typ: "" },
    ], false),
    "AdversaryArmor": o([
        { json: "CharArmor", js: "CharArmor", typ: r("PurpleCharArmor") },
    ], false),
    "PurpleCharArmor": o([
        { json: "ItemKey", js: "ItemKey", typ: "" },
        { json: "Key", js: "Key", typ: "" },
        { json: "Equipped", js: "Equipped", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: r("CharGearPurchasedAttachments") },
    ], false),
    "AdversaryAttributes": o([
        { json: "SoakValue", js: "SoakValue", typ: r("FluffySoakValue") },
        { json: "WoundThreshold", js: "WoundThreshold", typ: r("WoundThreshold") },
        { json: "StrainThreshold", js: "StrainThreshold", typ: r("PurpleStrainThreshold") },
        { json: "DefenseRanged", js: "DefenseRanged", typ: u(r("Defense"), null) },
        { json: "DefenseMelee", js: "DefenseMelee", typ: u(r("Defense"), null) },
        { json: "ForceRating", js: "ForceRating", typ: null },
    ], false),
    "Defense": o([
        { json: "ItemRanks", js: "ItemRanks", typ: u(undefined, "") },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: u(undefined, "") },
    ], false),
    "FluffySoakValue": o([
        { json: "ItemRanks", js: "ItemRanks", typ: u(undefined, "") },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: "" },
        { json: "CharRanks", js: "CharRanks", typ: "" },
    ], false),
    "PurpleStrainThreshold": o([
        { json: "CharRanks", js: "CharRanks", typ: "" },
        { json: "StartingRanks", js: "StartingRanks", typ: u(undefined, "") },
    ], false),
    "WoundThreshold": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: u(undefined, "") },
        { json: "CharRanks", js: "CharRanks", typ: "" },
    ], false),
    "AdversaryCharacteristics": o([
        { json: "CharCharacteristic", js: "CharCharacteristic", typ: a(r("FluffyCharCharacteristic")) },
    ], false),
    "FluffyCharCharacteristic": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Rank", js: "Rank", typ: r("PurpleRank") },
        { json: "Name", js: "Name", typ: u(undefined, "") },
    ], false),
    "PurpleRank": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
        { json: "CyberRanks", js: "CyberRanks", typ: u(undefined, "") },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: u(undefined, "") },
    ], false),
    "AdversarySkills": o([
        { json: "CharSkill", js: "CharSkill", typ: a(r("PurpleCharSkill")) },
    ], false),
    "PurpleCharSkill": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Rank", js: "Rank", typ: u(r("DefenseRanged"), null) },
    ], false),
    "SpecialArmor": o([
        { json: "AdvArmor", js: "AdvArmor", typ: r("AdvArmor") },
    ], false),
    "AdvArmor": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Soak", js: "Soak", typ: "" },
        { json: "Defense", js: "Defense", typ: "" },
    ], false),
    "AdversaryTalents": o([
        { json: "CharTalent", js: "CharTalent", typ: a(r("PurpleCharTalent")) },
    ], false),
    "PurpleCharTalent": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Ranks", js: "Ranks", typ: "" },
    ], false),
    "AdversaryWeapons": o([
        { json: "CharWeapon", js: "CharWeapon", typ: a(r("PurpleCharWeapon")) },
    ], false),
    "PurpleCharWeapon": o([
        { json: "ItemKey", js: "ItemKey", typ: "" },
        { json: "Key", js: "Key", typ: "" },
        { json: "Equipped", js: "Equipped", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: u(undefined, r("PurplePurchasedAttachments")) },
    ], false),
    "Obligations": o([
        { json: "CharObligation", js: "CharObligation", typ: r("CharObligation") },
    ], false),
    "CharObligation": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Size", js: "Size", typ: "" },
        { json: "ObKey", js: "ObKey", typ: "" },
    ], false),
    "Rewards": o([
        { json: "CharReward", js: "CharReward", typ: r("CharReward") },
    ], false),
    "CharReward": o([
        { json: "RewardKey", js: "RewardKey", typ: "" },
        { json: "SelectedOptions", js: "SelectedOptions", typ: r("CharRewardSelectedOptions") },
    ], false),
    "CharRewardSelectedOptions": o([
        { json: "CharOption", js: "CharOption", typ: r("PurpleCharOption") },
    ], false),
    "PurpleCharOption": o([
        { json: "ChoiceKey", js: "ChoiceKey", typ: "" },
        { json: "OptionKey", js: "OptionKey", typ: "" },
    ], false),
    "Rigger": o([
        { json: "VehicleKey", js: "VehicleKey", typ: null },
        { json: "WeaponIndex", js: "WeaponIndex", typ: "" },
        { json: "custRigger", js: "custRigger", typ: null },
        { json: "MaxSilhouette", js: "MaxSilhouette", typ: "" },
    ], false),
    "Schematics": o([
        { json: "CharSchematic", js: "CharSchematic", typ: a(r("CharSchematic")) },
    ], false),
    "CharSchematic": o([
        { json: "TemplateKey", js: "TemplateKey", typ: "" },
        { json: "Level", js: "Level", typ: "" },
        { json: "refTemplate", js: "refTemplate", typ: r("RefTemplate") },
    ], false),
    "RefTemplate": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "Description", js: "Description", typ: "" },
        { json: "Source", js: "Source", typ: r("SourceClass") },
        { json: "TempType", js: "TempType", typ: "" },
        { json: "MaterialCost", js: "MaterialCost", typ: "" },
        { json: "MaterialRarity", js: "MaterialRarity", typ: "" },
        { json: "TimeHours", js: "TimeHours", typ: "" },
        { json: "TimePerSilhouette", js: "TimePerSilhouette", typ: "" },
        { json: "CheckSkills", js: "CheckSkills", typ: r("CheckSkills") },
        { json: "CheckDifficulty", js: "CheckDifficulty", typ: r("CheckDifficulty") },
        { json: "ArmorProfile", js: "ArmorProfile", typ: u(undefined, r("ArmorProfile")) },
        { json: "WeaponProfile", js: "WeaponProfile", typ: u(undefined, r("WeaponProfile")) },
        { json: "Droid", js: "Droid", typ: u(undefined, r("Droid")) },
        { json: "DroidDirect", js: "DroidDirect", typ: u(undefined, r("DroidDirect")) },
        { json: "TemplateSkill", js: "TemplateSkill", typ: u(undefined, r("TemplateSkill")) },
        { json: "TemplateSkillRightTool", js: "TemplateSkillRightTool", typ: u(undefined, "") },
        { json: "GearProfile", js: "GearProfile", typ: u(undefined, r("GearProfile")) },
        { json: "TemplateSkillSuccess", js: "TemplateSkillSuccess", typ: u(undefined, "") },
        { json: "TemplateSkillRemSetback", js: "TemplateSkillRemSetback", typ: u(undefined, "") },
        { json: "VehicleProfile", js: "VehicleProfile", typ: u(undefined, r("VehicleProfile")) },
        { json: "MaterialRestricted", js: "MaterialRestricted", typ: u(undefined, "") },
    ], false),
    "ArmorProfile": o([
        { json: "Categories", js: "Categories", typ: r("ArmorProfileCategories") },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "Rarity", js: "Rarity", typ: "" },
        { json: "Soak", js: "Soak", typ: "" },
        { json: "Name", js: "Name", typ: u(undefined, "") },
        { json: "HP", js: "HP", typ: u(undefined, "") },
    ], false),
    "ArmorProfileCategories": o([
        { json: "Category", js: "Category", typ: u(a(""), "") },
    ], false),
    "CheckDifficulty": o([
        { json: "Difficulty", js: "Difficulty", typ: u(a(""), "") },
    ], false),
    "CheckSkills": o([
        { json: "Key", js: "Key", typ: u(a(""), r("Key")) },
    ], false),
    "Droid": o([
        { json: "LastChanged", js: "LastChanged", typ: Date },
        { json: "NotPersisted", js: "NotPersisted", typ: "" },
        { json: "FileName", js: "FileName", typ: "" },
        { json: "Name", js: "Name", typ: null },
        { json: "Key", js: "Key", typ: "" },
        { json: "Category", js: "Category", typ: "" },
        { json: "Characteristics", js: "Characteristics", typ: r("DroidCharacteristics") },
        { json: "Skills", js: "Skills", typ: null },
        { json: "Experience", js: "Experience", typ: r("Experience") },
        { json: "Attributes", js: "Attributes", typ: r("DroidAttributes") },
        { json: "Type", js: "Type", typ: "" },
        { json: "Silhouette", js: "Silhouette", typ: u(undefined, "") },
    ], false),
    "DroidAttributes": o([
        { json: "SoakValue", js: "SoakValue", typ: r("DefenseRanged") },
        { json: "WoundThreshold", js: "WoundThreshold", typ: u(r("DefenseRanged"), null) },
        { json: "StrainThreshold", js: "StrainThreshold", typ: null },
        { json: "DefenseRanged", js: "DefenseRanged", typ: null },
        { json: "DefenseMelee", js: "DefenseMelee", typ: null },
        { json: "ForceRating", js: "ForceRating", typ: null },
    ], false),
    "DroidCharacteristics": o([
        { json: "CharCharacteristic", js: "CharCharacteristic", typ: a(r("TentacledCharCharacteristic")) },
    ], false),
    "TentacledCharCharacteristic": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Rank", js: "Rank", typ: r("FluffyRank") },
        { json: "Name", js: "Name", typ: u(undefined, "") },
    ], false),
    "FluffyRank": o([
        { json: "StartingRanks", js: "StartingRanks", typ: "" },
    ], false),
    "DroidDirect": o([
        { json: "Skills", js: "Skills", typ: u(r("AdversarySkills"), null) },
        { json: "Talents", js: "Talents", typ: u(r("AdversaryTalents"), null) },
        { json: "SkillChoices", js: "SkillChoices", typ: u(undefined, r("TemplateSkill")) },
        { json: "SkillChoiceRanks", js: "SkillChoiceRanks", typ: u(undefined, "") },
        { json: "MakeNemesis", js: "MakeNemesis", typ: u(undefined, "") },
    ], false),
    "TemplateSkill": o([
        { json: "TypeValue", js: "TypeValue", typ: "" },
        { json: "SkillCount", js: "SkillCount", typ: "" },
        { json: "Type", js: "Type", typ: "" },
    ], false),
    "GearProfile": o([
        { json: "Type", js: "Type", typ: "" },
        { json: "Categories", js: "Categories", typ: null },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "Rarity", js: "Rarity", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: r("GearProfileBaseMods") },
    ], false),
    "GearProfileBaseMods": o([
        { json: "Mod", js: "Mod", typ: r("ModMod") },
    ], false),
    "ModMod": o([
        { json: "MiscDesc", js: "MiscDesc", typ: "" },
    ], false),
    "SourceClass": o([
        { json: "_", js: "_", typ: r("Empty") },
        { json: "$", js: "$", typ: r("Source") },
    ], false),
    "Source": o([
        { json: "Page", js: "Page", typ: "" },
    ], false),
    "VehicleProfile": o([
        { json: "Name", js: "Name", typ: "" },
        { json: "Type", js: "Type", typ: "" },
        { json: "Categories", js: "Categories", typ: r("CustomArmorCategories") },
        { json: "HP", js: "HP", typ: "" },
        { json: "Crew", js: "Crew", typ: "" },
        { json: "EncumbranceCapacity", js: "EncumbranceCapacity", typ: "" },
        { json: "Passengers", js: "Passengers", typ: "" },
        { json: "Silhouette", js: "Silhouette", typ: "" },
        { json: "HullTrauma", js: "HullTrauma", typ: "" },
        { json: "Starship", js: "Starship", typ: "" },
        { json: "SensorRange", js: "SensorRange", typ: "" },
    ], false),
    "WeaponProfile": o([
        { json: "Type", js: "Type", typ: "" },
        { json: "Categories", js: "Categories", typ: r("ArmorProfileCategories") },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "HP", js: "HP", typ: u(undefined, "") },
        { json: "Rarity", js: "Rarity", typ: "" },
        { json: "SkillKey", js: "SkillKey", typ: "" },
        { json: "DamageAdd", js: "DamageAdd", typ: u(undefined, "") },
        { json: "Crit", js: "Crit", typ: u(undefined, "") },
        { json: "RangeValue", js: "RangeValue", typ: "" },
        { json: "Hands", js: "Hands", typ: u(undefined, "") },
        { json: "Qualities", js: "Qualities", typ: u(undefined, r("Qualities")) },
        { json: "Range", js: "Range", typ: "" },
        { json: "Damage", js: "Damage", typ: u(undefined, "") },
        { json: "BaseMods", js: "BaseMods", typ: u(undefined, r("WeaponProfileBaseMods")) },
        { json: "NoMelee", js: "NoMelee", typ: u(undefined, "") },
        { json: "Price", js: "Price", typ: u(undefined, "") },
    ], false),
    "WeaponProfileBaseMods": o([
        { json: "Mod", js: "Mod", typ: r("QualityElement") },
    ], false),
    "QualityElement": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Count", js: "Count", typ: u(undefined, "") },
    ], false),
    "Qualities": o([
        { json: "Quality", js: "Quality", typ: u(a(r("QualityElement")), r("QualityElement")) },
    ], false),
    "CharacterSkills": o([
        { json: "CharSkill", js: "CharSkill", typ: a(r("FluffyCharSkill")) },
    ], false),
    "FluffyCharSkill": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Rank", js: "Rank", typ: u(r("CharSkillRank"), null) },
        { json: "isCareer", js: "isCareer", typ: u(undefined, "") },
        { json: "CharKeyOverride", js: "CharKeyOverride", typ: u(undefined, "") },
    ], false),
    "CharSkillRank": o([
        { json: "AttachRanks", js: "AttachRanks", typ: u(undefined, "") },
        { json: "PurchasedRanks", js: "PurchasedRanks", typ: u(undefined, "") },
        { json: "NonCareerRanks", js: "NonCareerRanks", typ: u(undefined, "") },
        { json: "CareerRanks", js: "CareerRanks", typ: u(undefined, "") },
        { json: "SpeciesRanks", js: "SpeciesRanks", typ: u(undefined, "") },
    ], false),
    "Specializations": o([
        { json: "CharSpecialization", js: "CharSpecialization", typ: a(r("CharSpecialization")) },
    ], false),
    "CharSpecialization": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Name", js: "Name", typ: "" },
        { json: "isStartingSpec", js: "isStartingSpec", typ: u(undefined, "") },
        { json: "isCareerSpec", js: "isCareerSpec", typ: u(undefined, "") },
        { json: "Talents", js: "Talents", typ: r("CharSpecializationTalents") },
    ], false),
    "CharSpecializationTalents": o([
        { json: "CharTalent", js: "CharTalent", typ: a(r("FluffyCharTalent")) },
    ], false),
    "FluffyCharTalent": o([
        { json: "Key", js: "Key", typ: "" },
        { json: "Col", js: "Col", typ: "" },
        { json: "Row", js: "Row", typ: "" },
        { json: "Purchased", js: "Purchased", typ: u(undefined, "") },
        { json: "BonusChars", js: "BonusChars", typ: u(undefined, r("BonusChars")) },
        { json: "SelectedSkills", js: "SelectedSkills", typ: u(undefined, r("FreeSpecs")) },
    ], false),
    "BonusChars": o([
        { json: "BonusChar", js: "BonusChar", typ: r("BonusChar") },
    ], false),
    "BonusChar": o([
        { json: "CharKey", js: "CharKey", typ: "" },
        { json: "Bonus", js: "Bonus", typ: "" },
    ], false),
    "Species": o([
        { json: "SpeciesKey", js: "SpeciesKey", typ: "" },
        { json: "SubSpeciesKey", js: "SubSpeciesKey", typ: null },
        { json: "SelectedOptions", js: "SelectedOptions", typ: r("SpeciesSelectedOptions") },
        { json: "NonCareerSkills", js: "NonCareerSkills", typ: r("Skills") },
    ], false),
    "SpeciesSelectedOptions": o([
        { json: "CharOption", js: "CharOption", typ: r("FluffyCharOption") },
    ], false),
    "FluffyCharOption": o([
        { json: "ChoiceKey", js: "ChoiceKey", typ: "" },
        { json: "OptionKey", js: "OptionKey", typ: "" },
        { json: "StartingSkillTraining", js: "StartingSkillTraining", typ: r("StartingSkillTraining") },
    ], false),
    "StartingSkillTraining": o([
        { json: "SkillTraining", js: "SkillTraining", typ: r("SkillTraining") },
    ], false),
    "SkillTraining": o([
        { json: "SkillCount", js: "SkillCount", typ: "" },
        { json: "Requirement", js: "Requirement", typ: r("Requirement") },
    ], false),
    "Requirement": o([
        { json: "NonCareer", js: "NonCareer", typ: "" },
    ], false),
    "Vehicles": o([
        { json: "CharVehicle", js: "CharVehicle", typ: a(r("CharVehicle")) },
    ], false),
    "CharVehicle": o([
        { json: "ItemKey", js: "ItemKey", typ: "" },
        { json: "Key", js: "Key", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: u(undefined, r("CharVehiclePurchasedAttachments")) },
        { json: "Name", js: "Name", typ: u(undefined, "") },
        { json: "Portrait", js: "Portrait", typ: "" },
        { json: "WeaponUpgrades", js: "WeaponUpgrades", typ: u(undefined, r("WeaponUpgrades")) },
    ], false),
    "CharVehiclePurchasedAttachments": o([
        { json: "CharItemAttachment", js: "CharItemAttachment", typ: u(a(r("TentacledCharItemAttachment")), r("StickyCharItemAttachment")) },
    ], false),
    "TentacledCharItemAttachment": o([
        { json: "AllMods", js: "AllMods", typ: r("PurpleMods") },
        { json: "AttachKey", js: "AttachKey", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: r("PurpleBaseMods") },
        { json: "PurchasedMods", js: "PurchasedMods", typ: u(undefined, r("FluffyMods")) },
    ], false),
    "FluffyMods": o([
        { json: "Mod", js: "Mod", typ: a(r("ItemDescInfoElement")) },
    ], false),
    "StickyCharItemAttachment": o([
        { json: "AllMods", js: "AllMods", typ: r("PurpleMods") },
        { json: "AttachKey", js: "AttachKey", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: r("FluffyBaseMods") },
        { json: "PurchasedMods", js: "PurchasedMods", typ: u(undefined, r("FluffyMods")) },
    ], false),
    "WeaponUpgrades": o([
        { json: "WeaponUpgrade", js: "WeaponUpgrade", typ: a(r("WeaponUpgrade")) },
    ], false),
    "WeaponUpgrade": o([
        { json: "AttachKey", js: "AttachKey", typ: null },
        { json: "WeapKey", js: "WeapKey", typ: "" },
        { json: "ReplacementIndex", js: "ReplacementIndex", typ: u(undefined, "") },
        { json: "Properties", js: "Properties", typ: r("Properties") },
    ], false),
    "Properties": o([
        { json: "Location", js: "Location", typ: "" },
        { json: "Turret", js: "Turret", typ: u(undefined, "") },
        { json: "Retractable", js: "Retractable", typ: "" },
        { json: "FiringArcs", js: "FiringArcs", typ: r("FiringArcs") },
    ], false),
    "FiringArcs": o([
        { json: "Fore", js: "Fore", typ: "" },
        { json: "Aft", js: "Aft", typ: "" },
        { json: "Port", js: "Port", typ: "" },
        { json: "Starboard", js: "Starboard", typ: "" },
        { json: "Dorsal", js: "Dorsal", typ: u(undefined, "") },
        { json: "Ventral", js: "Ventral", typ: u(undefined, "") },
    ], false),
    "CharacterWeapons": o([
        { json: "CharWeapon", js: "CharWeapon", typ: a(r("FluffyCharWeapon")) },
    ], false),
    "FluffyCharWeapon": o([
        { json: "ItemKey", js: "ItemKey", typ: u(null, "") },
        { json: "Key", js: "Key", typ: "" },
        { json: "Count", js: "Count", typ: "" },
        { json: "PurchasedAttachments", js: "PurchasedAttachments", typ: u(undefined, r("FluffyPurchasedAttachments")) },
        { json: "Notes", js: "Notes", typ: u(undefined, "") },
        { json: "CustomWeap", js: "CustomWeap", typ: u(undefined, r("CustomWeap")) },
        { json: "Equipped", js: "Equipped", typ: u(undefined, "") },
        { json: "Held", js: "Held", typ: u(undefined, "") },
        { json: "AddlHP", js: "AddlHP", typ: u(undefined, "") },
        { json: "Innate", js: "Innate", typ: u(undefined, "") },
    ], false),
    "CustomWeap": o([
        { json: "Name", js: "Name", typ: "" },
        { json: "Description", js: "Description", typ: "" },
        { json: "Type", js: "Type", typ: "" },
        { json: "Categories", js: "Categories", typ: r("ArmorProfileCategories") },
        { json: "Encumbrance", js: "Encumbrance", typ: "" },
        { json: "HP", js: "HP", typ: "" },
        { json: "Price", js: "Price", typ: "" },
        { json: "Rarity", js: "Rarity", typ: u(undefined, "") },
        { json: "BaseMods", js: "BaseMods", typ: u(undefined, r("CustomWeapBaseMods")) },
        { json: "SkillKey", js: "SkillKey", typ: "" },
        { json: "RangeValue", js: "RangeValue", typ: "" },
        { json: "NoMelee", js: "NoMelee", typ: u(undefined, "") },
        { json: "Hands", js: "Hands", typ: u(undefined, "") },
        { json: "Qualities", js: "Qualities", typ: r("Qualities") },
        { json: "Range", js: "Range", typ: "" },
        { json: "DamageAdd", js: "DamageAdd", typ: u(undefined, "") },
        { json: "Crit", js: "Crit", typ: u(undefined, "") },
        { json: "Damage", js: "Damage", typ: u(undefined, "") },
    ], false),
    "CustomWeapBaseMods": o([
        { json: "Mod", js: "Mod", typ: u(a(r("ItemDescInfoElement")), r("ModMod")) },
    ], false),
    "FluffyPurchasedAttachments": o([
        { json: "CharItemAttachment", js: "CharItemAttachment", typ: u(a(r("PurpleCharItemAttachment")), r("IndigoCharItemAttachment")) },
    ], false),
    "IndigoCharItemAttachment": o([
        { json: "AllMods", js: "AllMods", typ: r("FluffyMods") },
        { json: "AttachKey", js: "AttachKey", typ: "" },
        { json: "BaseMods", js: "BaseMods", typ: r("TentacledBaseMods") },
    ], false),
    "TentacledBaseMods": o([
        { json: "ItemDescInfo", js: "ItemDescInfo", typ: a(r("ItemDescInfoElement")) },
    ], false),
    "SkillKey": [
        "LTSABER",
    ],
    "Key": [
        "COMP",
        "MECH",
    ],
    "Empty": [
        "Endless Vigil",
        "Fully Operational",
        "Keeping the Peace",
        "Special Modifications",
    ],
};

